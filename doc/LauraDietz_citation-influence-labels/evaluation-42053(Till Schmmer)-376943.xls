Evaluation sheet		v0.1		
		Abstract	Authors	Title
citingPub	376943	Two problems often occur when implementing large software projects in a group: the problem of orientation  and the problem of finding competent partners for tight  co-operation. This paper presents a spatial representation  of the shared source code under development called software  space. It shows how awareness about other person's  activities can be provided, which helps to find appropriate  partners. Software space dynamically adapts to the user`s  preferences and thus improves during usage. We will  illustrate how the adapted representation can assist users  in finding their way in software space.  Keywords: team programming environments, navigation,  synchronous groupware, spatial model, awareness, coordination,  program analysis, TUKAN  1. Introduction  Hypertexts (such as a set of interwoven HTML documents)  have evolved as efficient media to impart complex  information to the reader. One problem in the reception of  hypertext is that of orientation. The question here is, how  a user can avoi...	Till Schmmer	Lost and Found in Software Space
evalAuthor	42053		Till Schmmer	

Evaluation Legend				
xx	strongly influenced			
x	influenced			
o	not really influenced			
oo	unrelated			
?	can't judge			

Evaluation				
======	id	Abstract	Authors	Title
x	124643	this paper, we motivate, describe, and illustrate the main components of FLECSE, thereby providing an initial answer  to the following fundamental question: In what ways must a traditional software engineering environment be  extended to allow software engineering tasks to be carried out more concurrently?  A definitive answer to this question requires several iterations of (i) identifying concurrent software  engineering scenarios, (ii) developing an environment that supports these scenarios, (iii) experimenting with the  environment in controlled settings, and (iv) testing the environment in the field. We have carried out mainly steps  (i) and (ii) of a preliminary iteration of this process, so our answers to this question are not yet ideal. However,  we believe our work is a necessary and important step towards practical environments for supporting concurrent  software engineering.  In the remaining discussion we will examine five important themes of concurrent software engineering:		Towards Computer-Supported Concurrent Software Engineering
x	393865	In the past, multi-user virtual environments have been developed as venues for entertainment and social interaction. Recent research focuses instead on their utility in carrying  out work in the real world. This research has identified the importance of a mapping between  the real and the virtual that permits the representation of real tasks in the virtual  environment. In this paper we investigate the use of virtual environments---in particular,  MUDs (Multi-User Dimensions)---in the domain of software process. In so doing,  we define a mapping, or metaphor, that permits the representation of software process  within a MUD. The system resulting from this mapping, called Promo, permits the  modeling and execution of software processes by geographically dispersed agents.  This work was supported in part by the Air Force Material Command, Rome Laboratory, and the Advanced Research  Projects Agency under Contract Number F30602-94-C-0253. This work was also supported in part by the Naval  R...	Dennis Heimbigner, Er L. Wolf	Software Process Modeling and Execution within Virtual Environments
o	80597	": Systems coordinating distributed collaborative work must manage user data distributed over a network. The strong consistency algorithms which designers have typically  borrowed from the distributed systems community are often unsuited to the particular needs  of CSCW. Here, I outline an alternative approach based on divergence and synchronisation  between parallel streams of activity. From a CSCW perspective, this strategy offers three  primary advantages. First, it is scalable, allowing smooth transitions from highly interactive  collaboration to more extended, ""asynchronous"" styles of work. Second, it supports ""multisynchronous  "" work, in which parties work independently in parallel. Third, it directly supports  observed patterns of opportunistic activities in collaborative working.  Introduction: Distributed Data Management  Collaborative applications coordinate activities which may be distributed in time  and/or space. Distribution in time means that activities may take place at differen..."	Paul Dourish	The Parting of the Ways: Divergence, Data Management and Collaborative Work
x	10883	Awareness of individual and group activities is critical to successful collaboration and is commonly supported in CSCW systems by active, information generation mechanisms separate from the shared workspace. These mechanisms penalise information providers, presuppose relevance to the recipient, and make access difficult. We discuss a study of shared editor use which suggests that awareness information provided and exploited passively through the shared workspace, allows users to move smoothly between close and loose collaboration, and to assign and coordinate work dynamically. Passive awareness mechanisms promise effective support for collaboration requiring this sort of behaviour, whilst avoiding problems with active approaches. KEYWORDS: Awareness, information sharing, coordination, shared workspaces, shared feedback. 1 INTRODUCTION Studies of collaborative writing [e.g. 2, 7, 16] highlight the extent to which information sharing, knowledge of group and individual activity, and coor...<	Cambridge Europarc, Paul Dourish, V. Bellotti	Awareness and Coordination in Shared Work Spaces
xx	103386	"The ability to synchronously and asynchronously edit work artefacts has become very important in many editing  tools. However, most tools usually only provide one kind  of collaborative editing ""level"", or provide incompatible  levels of collaborative editing. We describe our recent work  in adding flexible, user-configurable collaborative editing  facilities to component-based design environments, and  focuses on the human interaction issues in such systems.  We also briefly describe the engineering of such tools  using a component-based approach, which allows userconfigurable  collaborative editing capabilities to be added  to component-based tools without modifying the tool or  collaboration component implementations.  1. Introduction  Users of many editing tools require facilities to support  collaborative editing i.e. multi-user collaboration on the  development of work artefacts. This is common when  using tools such as CASE (Computer-Aided Software  Engineering) tools, CAD (Computer-Aided Desig..."	John C. Grundy	Human Interaction Issues for User-configurable Collaborative Editing Components
x	433211	Shared physical workspaces allow people to maintain upto -the minute knowledge about others' interaction with the  workspace. This knowledge is workspace awareness, part  of the glue that allows groups to collaborate effectively. In  this paper, we present the concept of workspace awareness  as a key for groupware systems that wish to support the  fluid interaction evident in face-to-face collaboration. We  discuss why workspace awareness is difficult to support in  groupware systems, and then present a conceptual  framework that groupware designers can use as a starting  point for thinking about and supporting awareness.  KEYWORDS: Workspace awareness, groupware, CSCW  INTRODUCTION  Shared physical workspaces (such as a chalkboard, a  control panel, or a tabletop) and the artifacts in them act as  stage and props for rich person-to-person interaction (e.g.  [1]). The affordances of physical workspaces allow people  to maintain awareness of others' locations, activities, and  intentions relative to ...	Carl Gutwin, Saul Greenberg	Workspace Awareness for Groupware
x	195548	This paper introduces COAST, an object-oriented toolkit for the development of synchronous groupware,  which enhances the usability and simplifies the  development of such applications. COAST offers basic  and generic components for the design of synchronous  groupware and is complemented by a methodology for  groupware development. Basic features of the toolkit  include transaction-controlled access to replicated  shared objects, transparent replication management,  and a fully optimistic concurrency control.  Development support is provided by a session concept  supporting the flexible coupling of shared objects'  aspects between concurrent users and by a fully  transparent updating concept for displays which is  based on declarative programming.  KEYWORDS: toolkit, synchronous collaboration,  groupware, replicated objects, sessions, display  updating, concurrency control  1 INTRODUCTION  Groupware allows several geographically distributed  people to work together with the aid of a computerized  envi...	Christian Schuckmann, Jorg M. Haake, Lutz Kirchner, Christian Schuckmann, Jorg M. Haake, Lutz Kirchner	Designing object-oriented synchronous groupware with COAST
x	323706	This paper describes a technique for making personalized recommendations from any type of database to a user based on similarities between the interest profile of that user and those of other users. In  particular, we discuss the implementation of a networked system called Ringo, which makes  personalized recommendations for music albums and artists. Ringo's database of users and artists grows  dynamically as more people use the system and enter more information. Four different algorithms for  making recommendations by using social information filtering were tested and compared. We present  quantitative and qualitative results obtained from the use of Ringo by more than 2000 people.  Keywords:  social information filtering, personalized recommendation systems, user modeling, information retrieval,  intelligent systems, CSCW.  Introduction  Recent years have seen the explosive growth of the sheer volume of information. The number of books,  movies, news, advertisements, and in particular on-li...		"Social Information Filtering: Algorithms for Automating ""Word of Mouth"""
o	111753	An important problem in program development and maintenance is version control, i.e., the task of keeping a software system consisting of many versions and  configurations well organized. The Revision Control System (RCS) is a software tool  that assists with that task. RCS manages revisions of text documents, in particular  source programs, documentation, and test data. It automates the storing, retrieval, logging  and identification of revisions, and it provides selection mechanisms for composing  configurations. This paper introduces basic version control concepts and discusses the  practice of version control using RCS. For conserving space, RCS stores deltas, i.e.,  differences between successive revisions. Several delta storage methods are discussed.  Usage statistics show that RCS's delta storage method is space and time efficient. The  paper concludes with a detailed survey of version control tools.  Keywords: configuration management, history management, version control, revisions,  del...	Walter F. Tichy	RCS - A System for Version Control
======				
